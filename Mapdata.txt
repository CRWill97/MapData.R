HW2_Mapdata.R
Cameron Willliams
2020-02-11
library(gdata)
## gdata: read.xls support for 'XLS' (Excel 97-2004) files ENABLED.
## 
## gdata: read.xls support for 'XLSX' (Excel 2007+) files ENABLED.
## 
## Attaching package: 'gdata'
## The following object is masked from 'package:stats':
## 
##     nobs
## The following object is masked from 'package:utils':
## 
##     object.size
## The following object is masked from 'package:base':
## 
##     startsWith
library(tidyverse)
## -- Attaching packages ------------------------------------------------- tidyverse 1.3.0 --
## v ggplot2 3.2.1     v purrr   0.3.3
## v tibble  2.1.3     v dplyr   0.8.4
## v tidyr   1.0.2     v stringr 1.4.0
## v readr   1.3.1     v forcats 0.4.0
## -- Conflicts ---------------------------------------------------- tidyverse_conflicts() --
## x dplyr::combine() masks gdata::combine()
## x dplyr::filter()  masks stats::filter()
## x dplyr::first()   masks gdata::first()
## x purrr::keep()    masks gdata::keep()
## x dplyr::lag()     masks stats::lag()
## x dplyr::last()    masks gdata::last()
library(dplyr)
library(readxl)
library(zipcode)
library(rio)
library(devtools)
## Loading required package: usethis
library(ggplot2)
library(ggmap)
## Google's Terms of Service: https://cloud.google.com/maps-platform/terms/.
## Please cite ggmap if you use it! See citation("ggmap") for details.
library(maps)
## 
## Attaching package: 'maps'
## The following object is masked from 'package:purrr':
## 
##     map
library(mapproj)
library(remotes)
## 
## Attaching package: 'remotes'
## The following objects are masked from 'package:devtools':
## 
##     dev_package_deps, install_bioc, install_bitbucket, install_cran,
##     install_deps, install_dev, install_git, install_github,
##     install_gitlab, install_local, install_svn, install_url,
##     install_version, update_packages
## The following object is masked from 'package:usethis':
## 
##     git_credentials
library(zipcode)



##Step 1: Load dataframe and clean dataframe
mydata <- import("https://www.psc.isr.umich.edu/dis/census/Features/tract2zip/MedianZIP-3.xlsx")
## Warning in read_fun(path = enc2native(normalizePath(path)), sheet_i = sheet, :
## Expecting numeric in C7057 / R7057C3: got '.'
## Warning in read_fun(path = enc2native(normalizePath(path)), sheet_i = sheet, :
## Expecting numeric in C26133 / R26133C3: got '.'
## Warning in read_fun(path = enc2native(normalizePath(path)), sheet_i = sheet, :
## Expecting numeric in C26134 / R26134C3: got '.'
## Warning in read_fun(path = enc2native(normalizePath(path)), sheet_i = sheet, :
## Expecting numeric in C26135 / R26135C3: got '.'
## Warning in read_fun(path = enc2native(normalizePath(path)), sheet_i = sheet, :
## Expecting numeric in C26202 / R26202C3: got '.'
## Warning in read_fun(path = enc2native(normalizePath(path)), sheet_i = sheet, :
## Expecting numeric in C29646 / R29646C3: got '.'
## Warning in read_fun(path = enc2native(normalizePath(path)), sheet_i = sheet, :
## Expecting numeric in C29981 / R29981C3: got '.'
str(mydata)
## 'data.frame':    32634 obs. of  4 variables:
##  $ Zip   : num  1001 1002 1003 1005 1007 ...
##  $ Median: num  56663 49853 28462 75423 79076 ...
##  $ Mean  : num  66688 75063 35121 82442 85802 ...
##  $ Pop   : num  16445 28069 8491 4798 12962 ...
data(zipcode)

mydata$Zip <- clean.zipcodes(mydata$Zip)

dfNew <- merge(mydata,zipcode, by.x ="Zip", by.y = "zip" )



which(dfNew$state == "HI" )
##  [1] 31328 31329 31330 31331 31332 31333 31334 31335 31336 31337 31338 31339
## [13] 31340 31341 31342 31343 31344 31345 31346 31347 31348 31349 31350 31351
## [25] 31352 31353 31354 31355 31356 31357 31358 31359 31360 31361 31362 31363
## [37] 31364 31365 31366 31367 31368 31369 31370 31371 31372 31373 31374 31375
## [49] 31376 31377 31378 31379 31380 31381 31382 31383 31384 31385 31386 31387
## [61] 31388 31389 31390 31391 31392 31393 31394 31395 31396 31397 31398 31399
## [73] 31400 31401 31402 31403 31404 31405 31406 31407 31408 31409 31410 31411
## [85] 31412 31413 31414 31415
which(dfNew$state == "AK")
##   [1] 32410 32411 32412 32413 32414 32415 32416 32417 32418 32419 32420 32421
##  [13] 32422 32423 32424 32425 32426 32427 32428 32429 32430 32431 32432 32433
##  [25] 32434 32435 32436 32437 32438 32439 32440 32441 32442 32443 32444 32445
##  [37] 32446 32447 32448 32449 32450 32451 32452 32453 32454 32455 32456 32457
##  [49] 32458 32459 32460 32461 32462 32463 32464 32465 32466 32467 32468 32469
##  [61] 32470 32471 32472 32473 32474 32475 32476 32477 32478 32479 32480 32481
##  [73] 32482 32483 32484 32485 32486 32487 32488 32489 32490 32491 32492 32493
##  [85] 32494 32495 32496 32497 32498 32499 32500 32501 32502 32503 32504 32505
##  [97] 32506 32507 32508 32509 32510 32511 32512 32513 32514 32515 32516 32517
## [109] 32518 32519 32520 32521 32522 32523 32524 32525 32526 32527 32528 32529
## [121] 32530 32531 32532 32533 32534 32535 32536 32537 32538 32539 32540 32541
## [133] 32542 32543 32544 32545 32546 32547 32548 32549 32550 32551 32552 32553
## [145] 32554 32555 32556 32557 32558 32559 32560 32561 32562 32563 32564 32565
## [157] 32566 32567 32568 32569 32570 32571 32572 32573 32574 32575 32576 32577
## [169] 32578 32579 32580 32581 32582 32583 32584 32585 32586 32587 32588 32589
## [181] 32590 32591 32592 32593 32594 32595 32596 32597 32598 32599 32600 32601
## [193] 32602 32603 32604 32605 32606 32607 32608 32609 32610 32611 32612 32613
## [205] 32614 32615 32616 32617 32618 32619 32620 32621 32622 32623 32624 32625
## [217] 32626 32627 32628 32629 32630 32631 32632 32633 32634
dfNew <-dfNew[-31328:-31415,]
dfNew <-dfNew[-32322:-32546,]

dfNew$statenames <- state.name[match(dfNew$state,state.abb)]
dfNew$statenames <- tolower(dfNew$statenames)
##=========================================================================================================================================

##Step 2: Show the income and population per state

dfSimple <- dfNew %>% 
                group_by(state) %>%
                summarize(meanIncome = mean(Median, na.rm = TRUE),meanPop = mean(Pop, na.rm = TRUE))

dfSimple$stateName <- state.name[match(dfSimple$state,state.abb)]
dfSimple$stateName <- tolower(dfSimple$stateName)

us <- map_data("state")

map.simple <- ggplot(dfSimple, aes(map_id = stateName))
map.simple <- map.simple + geom_map(map = us,fill = "white", color = "black" )
map.simple <- map.simple + expand_limits(x = us$long, y = us$lat)
map.simple <- map.simple + coord_map() + 
  ggtitle("Basic Map of Continetal USA")
map.simple
 
##map with color and average median income 
map.avmedIncome <- ggplot(dfSimple, aes(map_id = stateName))
map.avmedIncome <- map.avmedIncome + geom_map(map = us, aes(fill = dfSimple$meanIncome))
map.avmedIncome <- map.avmedIncome + expand_limits(x = us$long, y = us$lat)
map.avmedIncome <- map.avmedIncome + coord_map() + ggtitle("Average Median Income of the U.S.")
map.avmedIncome
 
## map representing the average population

map.pop <- ggplot(dfSimple, aes(map_id = stateName))
map.pop <- map.pop + geom_map(map = us, aes(fill = dfSimple$meanPop))
map.pop <- map.pop + expand_limits(x = us$long, y = us$lat)
map.pop <- map.pop + coord_map() + ggtitle("Average Median Population")
map.pop
 
##==========================================================================================================
##Step 3: SHow the income per state
## there is not column called statename in dfnew
map.incomeperzip <- ggplot(dfNew, aes(map_id = statenames)) + 
                        geom_map(map = us, color = "white", fill = "black") +
                        geom_point(data = dfNew, aes(x = longitude, y = latitude, color = Median)) +
                        expand_limits(x = us$long, y = us$lat) +
                        ggtitle("Median Income Per State")
map.incomeperzip
 
##=================================================================================================================  
##Step 4: Show zip code density
map.incomeperzip <- ggplot(dfNew, aes(map_id = statenames)) + 
                        geom_map(map = us, color = "white", fill = "black") +
                        geom_point(data = dfNew, aes(x = longitude, y = latitude, color = Median)) +
                        stat_density2d(aes(x = longitude, y = latitude)) +
                        expand_limits(x = us$long, y = us$lat) +
                        ggtitle("Median Income Per State Density")

map.incomeperzip
 
##===================================================================================================================
##Step:5 

api <-"AIzaSyADUIYbKxM_DiUS22WeHEBoRvUDM9FhjT0"
register_google(key = api)
latlon <- geocode("NYC,ny")
## Source : https://maps.googleapis.com/maps/api/geocode/json?address=NYC,ny&key=xxx
##===========================================================================================================================
mapZipZoomed <- map.incomeperzip + geom_point(aes(x = latlon$lon, y = latlon$lat), color = "darkred", size = 3)
mapZipZoomed <- map.incomeperzip + xlim(latlon$lon - 10, latlon$lat + 10) + 
  ylim(latlon$lat - 10, latlon$lat + 10) + coord_map()
mapZipZoomed
## Warning: Removed 20925 rows containing non-finite values (stat_density2d).
## Warning: Removed 20925 rows containing missing values (geom_point).
 
##==============================================================================================================================
map.incomezipzoom <- map.incomeperzip + geom_point(aes(x = latlon$lon, y = latlon$lat), color = "darkred", size = 3) 
map.incomezipzoom <- map.incomeperzip + xlim(latlon$lon, latlon$lon + 10) + ylim(latlon$lat - 10,latlon$lat + 10) + coord_map() 
map.incomezipzoom  
## Warning: Removed 29784 rows containing non-finite values (stat_density2d).
## Warning: Removed 29784 rows containing missing values (geom_point).
 